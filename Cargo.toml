[package]
name = "denux_dashboard"
version = "0.1.0"
edition = "2021"
description = "My first try to create a dashboard for my server to automate some things."
license = "AGPL-3.0"
repository = "https://github.com/DenuxPlays/Denux-Dashboard"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0.72"
console_log = "1.0.0"
rand = { version = "0.8.5", features = ["min_const_gen"], optional = true }
console_error_panic_hook = "0.1.7"
futures = "0.3.25"
cfg-if = "1.0.0"

#Leptos
leptos = { version = "0.4.8", features = [
  "serde",
  "nightly"
] }
leptos_axum = { version = "0.4.6", optional = true }
leptos_meta = { version = "0.4.6", features = ["nightly"] }
leptos_router = { version = "0.4.6", features = ["nightly"] }


log = "0.4.20"
simple_logger = "4.2.0"
serde = { version = "1.0.183", features = ["derive"] }
axum = { version = "0.6.20", optional = true, features=["macros"] }
tower = { version = "0.4.13", optional = true }
tower-http = { version = "0.4", features = ["fs"], optional = true }
tokio = { version = "1.29.1", features = ["full"], optional = true }
http = { version = "0.2.8" }
sqlx = { version = "0.6.3", features = [
	"runtime-tokio-rustls",
	"sqlite",
], optional = true }
thiserror = "1.0.43"
wasm-bindgen = "0.2"
axum_session_auth = { version = "0.2.0", features = [
	"sqlite-rustls",
], optional = true }
axum_session = { version = "0.2.3", features = [
	"sqlite-rustls",
], optional = true }
async-trait = { version = "0.1.71", optional = true }

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
    "dep:axum",
    "dep:tower",
    "dep:tower-http",
    "dep:tokio",
    "dep:axum_session_auth",
    "dep:axum_session",
    "dep:async-trait",
    "dep:sqlx",
    "dep:rand",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "dep:leptos_axum",
]

[package.metadata.cargo-all-features]
denylist = ["axum", "tower", "tower-http", "tokio", "sqlx", "leptos_axum"]
skip_feature_sets = [["ssr", "hydrate"]]

[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1

[package.metadata.leptos]
#Enabled size-optimization for the wasm build
lib-profile-release = "wasm-release"
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name   
output-name = "denux_dashboard"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg	
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
